import copy
def get_count_char(str_):
    dictionary = {}  # создаём пустой словарь
    str_list = str_.lower().split(" ")  # переводим строчку в список из букв сначала преобразуя все буквы из заглавных
    # в строчные методом lower, а затем разделяя строку по пробелам методом split

    # str_list.sort()  # сортируем
    # полученный список методом sort (ответ написан для несортированного списка, поэтому данная строчка
    # закомментирована)

    for char in "".join(str_list):  # объединямем список в строку методом join и перебираем её с помощью цикла for
        if char.isalpha():  # проверяем является ли элемент строки буквой
            if char not in dictionary.keys():  # проверяем встречается ли пришедшая буква среди ключей
                dictionary[char] = 1  # если не встречается то добавляем её в словарь со значением 1
            else:
                dictionary[char] += 1  # если встречается то добавлаяем 1 к значению находящемуся по ключу из этой буквы
    return dictionary  # возвращаем готовый словарь
# функция для создания словаря процентныйх отношений:


def get_percent_char(old_dict_):
    dict_ = copy.deepcopy(old_dict_)  # здесь для создания нового словаря используется метод глубокого копирования из
    # импортированного класса copy (copy.deepcopy), метод = нам не подходит, так как он не создаёт нового словаря,
    # а лишь копирует в новую переменную ссылку на наш словарь, поэтому при изменении словаря внутри функции будет
    # меняться изначальный словрь, что нам не нужно. Метод deepcopy же создаёт новый словарь идентичный
    # изначальному, но уже с другим адресом в памяти компьютера, поэтому меняя его внутри функции изначальный словарь
    # не меняется
    total = sum(dict_.values())  # ищем общее количество букв, суммируя все значения словаря
    for key in dict_.keys():  # перебираем словарь по ключам
        dict_[key] /= total  # ищем процентное отношение текущего ключа словаря (символа строки) е общему количеству
    return dict_  # возвращаем новый словарь





main_str = """
    Данное предложение будет разбиваться на отдельные слова. 
    В качестве разделителя для встроенного метода split будет выбран символ пробела. На выходе мы получим список отдельных слов. 
    Далее нужно отсортировать слова в алфавитном порядке, а после сортировки склеить их с помощью метода строк join. Приступим!!!!
"""
print(get_count_char(main_str))
# print(get_percent_char(get_count_char(main_str)))  # Вывод результата работы второй функции print(sum(
# get_percent_char(get_count_char(main_str)).values()))  # Проверка работы второй функции (результат сложения всех
# процентный отношений должен быть примерно равен 1 ("примерно" из-за округления во время суммирования всех значений) )
